public class LinkedQueue {	private Node firstNode; // references node for front of queue	private Node lastNode;  // references node for back of queue	public LinkedQueue()	{		firstNode = null;		lastNode = null;	} // end default constructor	public void enqueue(Object newEntry) {		Node newNode = new Node(newEntry, null);		if (isEmpty())			firstNode = newNode;		else			lastNode.setNextNode(newNode);		lastNode = newNode;	} // end enqueue	public Object dequeue()	{		Object front = null;		if (!isEmpty())	{			front = firstNode.getData();			firstNode = firstNode.getNextNode();			if (firstNode == null)				lastNode = null;		} // end if		return front;	} // end dequeue	public Object getFront()	{		Object front = null;		if (!isEmpty())			front = firstNode.getData();		return front;	} // end getFront	public boolean isEmpty()	{		return firstNode == null;	} // end isEmpty	public void clear()	{		firstNode = null;		lastNode = null;	} // end clear   	private class Node	{		private Object data;  // data portion		private Node	next;  // next to next node		private Node(Object dataPortion) {			data = dataPortion;			next = null;			} // end constructor				private Node(Object dataPortion, Node nextNode)	{			data = dataPortion;			next = nextNode;			} // end constructor				private Object getData()	{			return data;		} // end getData				private void setData(Object newData)	{			data = newData;		} // end setData				private Node getNextNode()	{			return next;		} // end getNextNode				private void setNextNode(Node nextNode)	{			next = nextNode;		} // end setNextNode	} // end Node} // end LinkedQueue