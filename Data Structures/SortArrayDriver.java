// CMPS390// SortArrayDriver.java/******************************************************************** * Class for sorting an array of int from smallest to largest. * Sorting Methods (7):  *     O(N * N)      selectionSort, insertionSort, bubbleSort,  *     O(N * log2N)  mergeSort, quickSort, heapSort,  *     O(M * N)      radixSort (where M is the number of digits)   ********************************************************************/public class SortArrayDriver {	public static void main(String[] argv)	{  			      int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};      testSelectionSort(list);      testInsertionSort(list);      testBubbleSort(list);            testMergeSort(list);      testQuickSort(list);      testHeapSort(list);      testRadixSort(list);	}  // end main/* Selection sort      int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};   Before selection sort:  20  90  50  40  80  10  60  70  30   After iteration i = 0:  10  90  50  40  80  20  60  70  30   After iteration i = 1:  10  20  50  40  80  90  60  70  30   After iteration i = 2:  10  20  30  40  80  90  60  70  50   After iteration i = 3:  10  20  30  40  80  90  60  70  50   After iteration i = 4:  10  20  30  40  50  90  60  70  80   After iteration i = 5:  10  20  30  40  50  60  90  70  80   After iteration i = 6:  10  20  30  40  50  60  70  90  80   After iteration i = 7:  10  20  30  40  50  60  70  80  90   After selection sort:   10  20  30  40  50  60  70  80  90*/	public static void testSelectionSort(int[] a) {      int[] list = copyArray(a);		System.out.print("\nBefore selection sort:");		SortArray.display(list);		SortArray.selectionSort(list);				System.out.print("After selection sort: ");		SortArray.display(list);	} // end testSelectionSort/* Insertion sort        int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};      Before insertion sort:  20  90  50  40  80  10  60  70  30   After iteration i = 1:  20  90  50  40  80  10  60  70  30   After iteration i = 2:  20  50  90  40  80  10  60  70  30   After iteration i = 3:  20  40  50  90  80  10  60  70  30   After iteration i = 4:  20  40  50  80  90  10  60  70  30   After iteration i = 5:  10  20  40  50  80  90  60  70  30   After iteration i = 6:  10  20  40  50  60  80  90  70  30   After iteration i = 7:  10  20  40  50  60  70  80  90  30   After iteration i = 8:  10  20  30  40  50  60  70  80  90   After insertion sort:   10  20  30  40  50  60  70  80  90 */	public static void testInsertionSort(int[] a) {      int[] list = copyArray(a);		System.out.print("\nBefore insertion sort:");		SortArray.display(list);		SortArray.insertionSort(list);				System.out.print("After insertion sort: ");		SortArray.display(list);	} // end testInsertionSort/* Bubble sort         int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};     Before bubble sort:	   20  90  50  40  80  10  60  70  30   After iteration i = 0:  10  20  90  50  40  80  30  60  70   After iteration i = 1:  10  20  30  90  50  40  80  60  70   After iteration i = 2:  10  20  30  40  90  50  60  80  70   After iteration i = 3:  10  20  30  40  50  90  60  70  80   After iteration i = 4:  10  20  30  40  50  60  90  70  80   After iteration i = 5:  10  20  30  40  50  60  70  90  80   After iteration i = 6:  10  20  30  40  50  60  70  80  90   After iteration i = 7:  10  20  30  40  50  60  70  80  90   After bubble sort:	   10  20  30  40  50  60  70  80  90*/   	public static void testBubbleSort(int[] a) {      int[] list = copyArray(a);		System.out.print("\nBefore bubble sort:\t ");		SortArray.display(list);		SortArray.bubbleSort(list);				System.out.print("After bubble sort:\t ");		SortArray.display(list);	} // end testBubbleSort/* Merge sort      int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};   Before merge sort:	   20  90  50  40  80  10  60  70  30   (20, 90,   50, 40      80, 10,   60,  70, 30)                     /  \   (20, 90,   50, 40)    (80, 10,   60,  70, 30)           /\                    /\   (20, 90)  (50, 40)    (80, 10)  (60,  70, 30)      /\        /\          /\         /\   (20)(90)  (50)(40)    (80) (10) (60) (70, 30)                                           /\                                        (70)(30)   After merge:			   20  90   After merge:			   40  50   After merge:			   20  40  50  90   After merge:			   10  80   After merge:			   30  70   After merge:			   30  60  70   After merge:			   10  30  60  70  80   After merge:			   10  20  30  40  50  60  70  80  90   After merge sort:		   10  20  30  40  50  60  70  80  90*/	public static void testMergeSort(int[] a)	{      int[] list = copyArray(a);		System.out.print("\nBefore merge sort:\t ");		SortArray.display(list);		SortArray.mergeSort(list);				System.out.print("After merge sort:\t\t ");		SortArray.display(list);	} // end testMergeSort/* Quick sort      int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};   (20,  90,  50,  40  80,  10,  60,  70,  30)split 1 /     \   (10)  20  (50,  40  80,  90,  60,  70,  30)split 4             /      \    10   20  (30,  40) 50  (90,  60,  70,  80)split 3         / \                       10   20  (30)  40  50  (90,  60,  70,  80)split 8                                     /    10   20   30   40  50  (80   60   70   90)split 7                            /      \    10   20   30   40  50  (70   60)  80  (90) split 6                      /  \    10   20   30   40  50  (60)  70   80   90     */	public static void testQuickSort(int[] a) {      int[] list = copyArray(a);		System.out.print("\nBefore quick sort:\t ");		SortArray.display(list);		SortArray.quickSort(list);				System.out.print("After quick sort:\t\t ");		SortArray.display(list);	} // end testHeapSort/* Heap sort      int[] list = {20, 90, 50, 40, 80, 10, 60, 70, 30};      Before heap sort:		  20  90  50  40  80  10  60  70  30           20        /      \       90       50     /    \    /  \    40    80  10  60   / \             70  30   After building a heap:  90  80  60  70  20  10  50  40  30           90        /      \       80       60     /    \    /  \    70    20  10  50   / \             40  30                After reheap 0 - 8:	   80  70  60  40  20  10  50  30  90   After reheap 0 - 7:	   70  40  60  30  20  10  50  80  90   After reheap 0 - 6:	   60  40  50  30  20  10  70  80  90   After reheap 0 - 5:	   50  40  10  30  20  60  70  80  90   After reheap 0 - 4:	   40  30  10  20  50  60  70  80  90   After reheap 0 - 3:	   30  20  10  40  50  60  70  80  90   After reheap 0 - 2:	   20  10  30  40  50  60  70  80  90   After reheap 0 - 1:	   10  20  30  40  50  60  70  80  90   After heap sort:		   10  20  30  40  50  60  70  80  90*/	public static void testHeapSort(int[] a) {      int[] list = copyArray(a);		System.out.print("\nBefore heap sort:\t\t ");		SortArray.display(list);		SortArray.heapSort(list);				System.out.print("After heap sort:\t\t ");		SortArray.display(list);	} // end testHeapSort/* Radix sort      int[] list = {22, 94, 5, 4, 805, 111, 61, 70, 3};   Before radix sort:	   22  94   5   4 805 111  61  70   3   After exp =      1:	   70 111  61  22   3  94   4   5 805   After exp =     10:	    3   4   5 805 111  22  61  70  94   After exp =    100:	    3   4   5  22  61  70  94 111 805   After radix sort:		    3   4   5  22  61  70  94 111 805*/	public static void testRadixSort(int[] a) {      int[] list = {22, 94, 5, 4, 805, 111, 61, 70, 3};      System.out.print("\nBefore radix sort:\t ");       SortArray.display(list);      SortArray.radixSort(list);      System.out.print("After radix sort:\t\t ");      SortArray.display(list);	} // end testHeapSort	public static int[] copyArray(int[] a) {      int[] copy = new int[a.length];		for (int index = 0; index < a.length; index++)			copy[index] = a[index];      return copy;	} // end copyArray}  // end SortArrayDriver/* OUTPUT   Before selection sort:  20  90  50  40  80  10  60  70  30   After iteration i = 0:  10  90  50  40  80  20  60  70  30   After iteration i = 1:  10  20  50  40  80  90  60  70  30   After iteration i = 2:  10  20  30  40  80  90  60  70  50   After iteration i = 3:  10  20  30  40  80  90  60  70  50   After iteration i = 4:  10  20  30  40  50  90  60  70  80   After iteration i = 5:  10  20  30  40  50  60  90  70  80   After iteration i = 6:  10  20  30  40  50  60  70  90  80   After iteration i = 7:  10  20  30  40  50  60  70  80  90   After selection sort:   10  20  30  40  50  60  70  80  90      Before insertion sort:  20  90  50  40  80  10  60  70  30   After iteration i = 1:  20  90  50  40  80  10  60  70  30   After iteration i = 2:  20  50  90  40  80  10  60  70  30   After iteration i = 3:  20  40  50  90  80  10  60  70  30   After iteration i = 4:  20  40  50  80  90  10  60  70  30   After iteration i = 5:  10  20  40  50  80  90  60  70  30   After iteration i = 6:  10  20  40  50  60  80  90  70  30   After iteration i = 7:  10  20  40  50  60  70  80  90  30   After iteration i = 8:  10  20  30  40  50  60  70  80  90   After insertion sort:   10  20  30  40  50  60  70  80  90      Before bubble sort:	   20  90  50  40  80  10  60  70  30   After iteration i = 0:  10  20  90  50  40  80  30  60  70   After iteration i = 1:  10  20  30  90  50  40  80  60  70   After iteration i = 2:  10  20  30  40  90  50  60  80  70   After iteration i = 3:  10  20  30  40  50  90  60  70  80   After iteration i = 4:  10  20  30  40  50  60  90  70  80   After iteration i = 5:  10  20  30  40  50  60  70  90  80   After iteration i = 6:  10  20  30  40  50  60  70  80  90   After iteration i = 7:  10  20  30  40  50  60  70  80  90   After bubble sort:	   10  20  30  40  50  60  70  80  90      Before merge sort:	   20  90  50  40  80  10  60  70  30   After merge:			   20  90   After merge:			   40  50   After merge:			   20  40  50  90   After merge:			   10  80   After merge:			   30  70   After merge:			   30  60  70   After merge:			   10  30  60  70  80   After merge:			   10  20  30  40  50  60  70  80  90   After merge sort:		   10  20  30  40  50  60  70  80  90      Before quick sort:	   20  90  50  40  80  10  60  70  30   After split pivot = 1:  10  20  50  40  80  90  60  70  30   After split pivot = 4:  10  20  30  40  50  90  60  70  80   After split pivot = 3:  10  20  30  40  50  90  60  70  80   After split pivot = 8:  10  20  30  40  50  80  60  70  90   After split pivot = 7:  10  20  30  40  50  70  60  80  90   After split pivot = 6:  10  20  30  40  50  60  70  80  90   After quick sort:		   10  20  30  40  50  60  70  80  90      Before heap sort:		   20  90  50  40  80  10  60  70  30   After building a heap:  90  80  60  70  20  10  50  40  30   After reheap 0 - 8:	   80  70  60  40  20  10  50  30  90   After reheap 0 - 7:	   70  40  60  30  20  10  50  80  90   After reheap 0 - 6:	   60  40  50  30  20  10  70  80  90   After reheap 0 - 5:	   50  40  10  30  20  60  70  80  90   After reheap 0 - 4:	   40  30  10  20  50  60  70  80  90   After reheap 0 - 3:	   30  20  10  40  50  60  70  80  90   After reheap 0 - 2:	   20  10  30  40  50  60  70  80  90   After reheap 0 - 1:	   10  20  30  40  50  60  70  80  90   After heap sort:		   10  20  30  40  50  60  70  80  90      Before radix sort:	   22  94   5   4 805 111  61  70   3   After exp =      1:	   70 111  61  22   3  94   4   5 805   After exp =     10:	    3   4   5 805 111  22  61  70  94   After exp =    100:	    3   4   5  22  61  70  94 111 805   After radix sort:		    3   4   5  22  61  70  94 111 805*/