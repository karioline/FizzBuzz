// CMPS390// HashTableLinearProbingDriver.java// Kuo-pao Yangpublic class HashTableLinearProbingDriver {	public static void main(String[] args)	{		testHashTable();	}  // end main		// Tests the hash table when no locations contain null	public static void testHashTable()	{      final int TABLE_SIZE = 11;  		HashTableLinearProbing nameList = new HashTableLinearProbing(TABLE_SIZE); 		System.out.println("Create a hash table has " +  TABLE_SIZE + " locations.");		System.out.println("Testing isEmpty() = " + nameList.isEmpty());      		      // Testing add()			System.out.println("\nTesting add(): Bobby, David, Isabella, Ericka, Rachel");		nameList.add("Bobby",   "549-0101");		nameList.add("David",   "549-0303");		nameList.add("Isabella","549-0102");		nameList.add("Ericka",  "549-0104");		nameList.add("Rachel",  "549-0505");						nameList.add("David",   "549-0303");		System.out.println("Hash table contains " + nameList.getSize() + " (should be 5) items, as follows:");		nameList.display();      // Testing Contains()			System.out.println("\nTesting Contains(): Rachel, Andrew, Tony");      System.out.println("Rachel is in the dictionary = " + nameList.contains("Rachel"));      System.out.println("Andrew is in the dictionary = " + nameList.contains("Isabella"));      System.out.println("Tony is in the dictionary = " + nameList.contains("Tony"));      // Testing remove()			System.out.println("\nTesting remove(): Isabella, Ericka, David");		nameList.remove("Isabella");      nameList.remove("Ericka");      nameList.remove("David");		System.out.println("Hash table contains " + nameList.getSize() + " (should be 2) items, as follows:");		nameList.display();      // Testing add() again			System.out.println("\nTesting Add() again: Cory, Daniel, Andrew");		nameList.add("Cory",    "549-1010");				nameList.add("Daniel",  "549-1000");		nameList.add("Andrew",  "549-0102");		System.out.println("Hash table contains " + nameList.getSize() + " (should be 5) items, as follows:");		nameList.display();       	   } // end testHashTable}  // end Driver/* OUTPUT   Create a hash table has 11 locations.   Testing isEmpty() = true      Testing add(): Bobby, David, Isabella, Ericka, Rachel   	Bobby hashIndex = 1   	David hashIndex = 3   	Isabella hashIndex = 1   	Ericka hashIndex = 1   	Rachel hashIndex = 5   	David hashIndex = 3   Hash table contains 5 (should be 5) items, as follows:   0 : null (Empty)   1 : Bobby	549-0101   2 : Isabella	549-0102   3 : David	549-0303   4 : Ericka	549-0104   5 : Rachel	549-0505   6 : null (Empty)   7 : null (Empty)   8 : null (Empty)   9 : null (Empty)   10 : null (Empty)      Testing Contains(): Rachel, Andrew, Tony   	Rachel hashIndex = 5   Rachel is in the dictionary = true   	Isabella hashIndex = 1   Andrew is in the dictionary = true   	Tony hashIndex = 3   Tony is in the dictionary = false      Testing remove(): Isabella, Ericka, David   	Isabella hashIndex = 1   	Ericka hashIndex = 1   	David hashIndex = 3   Hash table contains 2 (should be 2) items, as follows:   0 : null (Empty)   1 : Bobby	549-0101   2 : romoved (Available)   3 : romoved (Available)   4 : romoved (Available)   5 : Rachel	549-0505   6 : null (Empty)   7 : null (Empty)   8 : null (Empty)   9 : null (Empty)   10 : null (Empty)      Testing Add() again: Cory, Daniel, Andrew   	Cory hashIndex = 10   	Daniel hashIndex = 10   	Andrew hashIndex = 1   Hash table contains 5 (should be 5) items, as follows:   0 : Daniel	549-1000   1 : Bobby	549-0101   2 : Andrew	549-0102   3 : romoved (Available)   4 : romoved (Available)   5 : Rachel	549-0505   6 : null (Empty)   7 : null (Empty)   8 : null (Empty)   9 : null (Empty)   10 : Cory	549-1010*/