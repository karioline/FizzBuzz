// Kari Shelton// CMPS390// BinaryTree.java// Complete 6 methods: getHeight, getNumberOfNodes, preorder, postorder, inorder, levelorder // Due 7/5/2017 public class BinaryTree {	private BinaryNode root;		public BinaryTree()	{		root = null;	} // end default constructor		public BinaryTree(Object rootData)	{		root = new BinaryNode(rootData);	} // end constructor		public BinaryTree(Object rootData, BinaryTree leftTree, BinaryTree rightTree)	{		setTree(rootData, leftTree, rightTree);	} // end constructor		public void setTree(Object rootData)	{		root = new BinaryNode(rootData);	} // end setTree		public void setTree(Object rootData, BinaryTree leftTree, BinaryTree rightTree)	{  		root = new BinaryNode(rootData);		if ((leftTree != null) && !leftTree.isEmpty())			root.setLeftChild(leftTree.root);		if ((rightTree != null) && !rightTree.isEmpty()) {			if (rightTree != leftTree)				root.setRightChild(rightTree.root);			else				root.setRightChild(rightTree.root.copy());		} // end if		if ((leftTree != null) && (this != leftTree))			leftTree.clear(); 		if ((rightTree != null) && (this != rightTree))			rightTree.clear();	} // end setTree	public Object getRootData()	{		Object rootData = null;				if (root != null)		 	rootData =  root.getData();				return rootData;	} // end getRootData	protected void setRootData(Object rootData)	{		root.setData(rootData);	} // end setRootData	protected void setRootNode(BinaryNode rootNode)	{		root = rootNode;	} // end setRootNode	protected BinaryNode getRootNode()	{		return root;	} // end getRootNode 	public boolean isEmpty()	{		return root == null;	} // end isEmpty	public void clear()	{		root = null;	} // end clear	public int getHeight()	{		return getHeight(root);	} // end getHeight	      	public int getHeight(BinaryNode node)	{           int height = 0;      if(node != null){         height = 1 + Math.max(getHeight(node.getLeftChild()), getHeight(node.getRightChild()));      }      return height;     	} // end getHeight      public int getNumberOfNodes()	{		return getNumberOfNodes(root);	} // end getNumberOfNodes   	public int getNumberOfNodes(BinaryNode node)	{       int numOfNodes = 0;       if(node != null){         numOfNodes = (1 + getNumberOfNodes(node.getLeftChild()) + getNumberOfNodes(node.getRightChild()));       }       return numOfNodes;	} // end getNumberOfNodes      public void preorder(BinaryNode node) {      if(node != null){         System.out.print(node.getData() + " ");         preorder(node.getLeftChild());         preorder(node.getRightChild());      }         } // end preorder   public void postorder(BinaryNode node) {      if(node != null){        postorder(node.getLeftChild());        postorder(node.getRightChild());        System.out.print(node.getData() + " ");      }         } // end postorder   public void inorder(BinaryNode node) {      if(node != null){         inorder(node.getLeftChild());         System.out.print(node.getData() + " ");         inorder(node.getRightChild());      }   } // end inorder   public void levelorder(BinaryNode node) {      LinkedQueue queue = new LinkedQueue();      queue.enqueue(node);      while(!queue.isEmpty()){         BinaryNode tempNode = (BinaryNode)queue.dequeue();         System.out.print(tempNode.getData() + " ");         if(tempNode.getLeftChild() != null)            queue.enqueue(tempNode.getLeftChild());         if(tempNode.getRightChild() != null)            queue.enqueue(tempNode.getRightChild());               }   }} // end BinaryTree