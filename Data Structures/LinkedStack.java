public class LinkedStack {	private Node topNode; // references first node in chain	public LinkedStack()	{		topNode = null;	} // end default constructor		public void push(Object newEntry)	{		Node newNode = new Node(newEntry, topNode);		topNode = newNode;	} // end push	public Object pop()	{		Object top = null;		if (topNode != null)		{			top = topNode.getData(); 			topNode = topNode.getNextNode(); 		} // end if		return top;	} // end pop	public Object peek()	{		Object top = null;		if (topNode != null)			top = topNode.getData(); 		return top;	} // end peek	public boolean isEmpty()	{		return topNode == null;	} // end isEmpty	public void clear()	{		topNode = null;	} // end clear	private class Node	{		private Object data;  // data portion		private Node	next;  // next to next node		private Node(Object dataPortion)	{			data = dataPortion;			next = null;			} // end constructor				private Node(Object dataPortion, Node nextNode) {			data = dataPortion;			next = nextNode;			} // end constructor				private Object getData() {			return data;		} // end getData				private void setData(Object newData) {			data = newData;		} // end setData				private Node getNextNode()	{			return next;		} // end getNextNode				private void setNextNode(Node nextNode) {			next = nextNode;		} // end setNextNode	} // end Node   } // end LinkedStack