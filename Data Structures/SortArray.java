// SortArray.java/******************************************************************** * Class for sorting an array of int from smallest to largest. * Sorting Methods (7):  *     O(N * N)      selectionSort, insertionSort, bubbleSort,  *     O(N * log2N)  mergeSort, quickSort, heapSort,  *     O(M * N)      radixSort (where M is the number of digits)   ********************************************************************/public class SortArray {// -------------------------------------------------------------------------------// Selection sort   public static void selectionSort(int[] list) {      for (int i = 0; i < list.length - 1; i++) {         // Find the minimum in the list[i..list.length-1]         int min = list[i];         int minIndex = i;         for (int j = i + 1; j < list.length; j++) {            if (min > list[j]) {               min = list[j];               minIndex = j;            } // end if         } // end for         // Swap list[i] with list[minIndex] if necessary;         if (minIndex != i) {            list[minIndex] = list[i];            list[i] = min;         } // end if//       System.out.print("After iteration i = " + i + ":"); display(list);   	} // end for	} // end selectionSort// -------------------------------------------------------------------------------// Insertion sort	public static void insertionSort(int[] list) {      for (int i = 1; i < list.length; i++) {         // insert list[i] into a sorted sublist list[0..i-1] so that         //  list[0..i] is sorted.          int current = list[i];         int j;         for (j = i - 1; j >= 0 && current < list[j]; j--)             list[j+1] = list[j];         // Insert the current element into list[j+1]         list[j+1] = current;//       System.out.print("After iteration i = " + i + ":"); display(list);      } // end for	} // end insertionSort// -------------------------------------------------------------------------------// Bubble sort	public static void bubbleSort(int[] list)	{		for (int i = 0; i < list.length-1; i++) {			   for (int j = list.length - 1; j > i; j--)            if (list[j-1] > list[j])               swap(list, j-1, j);       System.out.print("After iteration i = " + i + ":"); display(list);		} // end for	} // end bubbleSort// -------------------------------------------------------------------------------// Merge sort    public static void mergeSort(int[] list) {         if (list.length > 1) {         // Merge sort left half         int leftLength = list.length/2;         int[] leftHalf = new int[leftLength];         for (int i = 0; i < leftLength; i++)            leftHalf[i] = list[i];         mergeSort(leftHalf);         // Merge sort right half         int rightLength = list.length - list.length/2;         int[] rightHalf = new int[rightLength];         for (int i = 0; i < rightLength; i++)            rightHalf[i] = list[list.length/2 + i];         mergeSort(rightHalf);         // Merge left half with right half into list         merge(leftHalf, rightHalf, list);//       System.out.print("After merge:\t\t\t "); display(list);      } // end if   } // end mergeSort  // Merge two sorted lists (leftHalf and rightHalf) into list  public static void merge(int[] leftHalf, int[] rightHalf, int[] list) {    int leftIndex = 0;  // Current index in leftHalf    int rightIndex = 0; // Current index in rightHalf    int i = 0;          // Current index in list    while (leftIndex < leftHalf.length && rightIndex < rightHalf.length) {      if (leftHalf[leftIndex] < rightHalf[rightIndex])        list[i++] = leftHalf[leftIndex++];      else        list[i++] = rightHalf[rightIndex++];    } // end while    while (leftIndex < leftHalf.length)      list[i++] = leftHalf[leftIndex++];    while (rightIndex < rightHalf.length)      list[i++] = rightHalf[rightIndex++];  } // end merge// -------------------------------------------------------------------------------// Quick sort   public static void quickSort(int[] list) {      quickSort(list, 0, list.length - 1);   }   private static void quickSort(int[] list, int first, int last) {      if (last > first) {         int pivotIndex = split(list, first, last);      System.out.print("After split pivot = " + pivotIndex + ":"); display(list);         quickSort(list, first, pivotIndex - 1);         quickSort(list, pivotIndex + 1, last);      } // end if   } // end quickSort   // Split the array list[first..last]    private static int split(int[] list, int first, int last) {      int pivot = list[first];  // the first element as the pivot      int low = first + 1;      // Index for forward search      int high = last;          // Index for backward search      while (low < high) {         // Search forward from left         while (low <= high && list[low] <= pivot)            low++;         // Search backward from right         while (low <= high && pivot < list[high])            high--;         // Swap two elements in the list         if (low < high) {            int temp = list[high];            list[high--] = list[low];            list[low++] = temp;         } // end if      } // end while      // Swap pivot with list[high]      if (pivot > list[high]) {         list[first] = list[high];         list[high] = pivot;      }      return high;     } // end split// -------------------------------------------------------------------------------// Heap sort	public static void heapSort(int[] list) {		// build heap			for (int index = list.length/2-1; index >= 0; index--)			reheap(list, index, list.length-1);			    System.out.print("After building a heap:"); display(list);		for (int last = list.length-1; last > 0; last--)	{			swap(list, 0, last);					reheap(list, 0, last-1);    System.out.print("After reheap 0 - " + last + ":\t "); display(list);		} // end for		} // end heapSort   	private static void reheap(int[] heap, int root, int bottom) {		boolean done = false;      int maxChild;              int leftChild = 2 * root + 1;   // left child index      int rightChild = 2 * root + 2;  // right child index		while (!done && leftChild <= bottom) {         if (leftChild == bottom)             maxChild = leftChild;         else {            if (heap[leftChild] > heap[rightChild])               maxChild = leftChild;            else               maxChild = rightChild;         } // end if         if (heap[maxChild] > heap[root]) {            swap(heap, maxChild, root); 				root = maxChild;				leftChild =  2 * root + 1;            rightChild = 2 * root + 2;         } // end if         else            done = true; 		} // end while			} // end reheap// -------------------------------------------------------------------------------// Radix sort   static void radixSort(int[] list) {      // Gets the maximum number      int max = list[0];      for (int i = 1; i < list.length; i++)         if (list[i] > max)            max = list[i];      // exp is 1, 10, 100, 1000      for (int exp = 1; max/exp > 0; exp = exp * 10) {         int[] result = new int[list.length];         int[] bucket = new int[10];           // Store count of occurrences in bucket[]         for (int i = 0; i < list.length; i++)            bucket[(list[i]/exp)%10]++;          // bucket[i] has actual position of this digit in result[]         for (int i = 1; i < 10; i++)            bucket[i] = bucket[i] + bucket[i-1];          // Build result[]         for (int i = list.length-1; i >= 0; i--)             result[--bucket[(list[i]/exp)%10]] = list[i];         // Copy sorted result[] to list[]         for (int i = 0; i < list.length; i++)            list[i] = result[i];                  System.out.printf("After exp = %6d:\t ", exp); display(list);      } // end for   } // end radixSort // -------------------------------------------------------------------------------	private static void swap(int[] a, int i, int j) {		int temp = a[i];		a[i] = a[j];		a[j] = temp; 	} // end swap   public static void display(int[] list)	{		for (int i = 0; i < list.length; i++)			System.out.printf("%4d", list[i]);		System.out.println();	} // end display} // end SortArray