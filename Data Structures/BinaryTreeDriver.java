// CMPS390// BinaryTreeDriver.java// Kuo-pao Yang/*          A       /     \      B       C     / \       \    D   E       H       / \      F   G*/public class BinaryTreeDriver {	public static void main(String[] args) 	{		BinaryTree aTree = createTree();		testTreeOperations(aTree);		testTraversals(aTree);	}  // end main	public static BinaryTree createTree()	{		System.out.println("\nCreating a binary tree!");		// represent each leaf as a one-node tree      BinaryTree aTree  = new BinaryTree();       BinaryNode a = new BinaryNode("A");      BinaryNode b = new BinaryNode("B");      BinaryNode c = new BinaryNode("C");      BinaryNode d = new BinaryNode("D");      BinaryNode e = new BinaryNode("E");      BinaryNode f = new BinaryNode("F");      BinaryNode g = new BinaryNode("G");      BinaryNode h = new BinaryNode("H");            aTree.setRootNode(a);      a.setLeftChild(b);   a.setRightChild(c);      b.setLeftChild(d);   b.setRightChild(e);                           c.setRightChild(h);      e.setLeftChild(f);   e.setRightChild(g);         return aTree;	} // end createTree	public static void testTreeOperations(BinaryTree aTree)	{      System.out.println("Test isEmpty(): " + aTree.isEmpty());		// display root, height, number of nodes		System.out.println("Root of tree is " + aTree.getRootData() + " (should be A)");		System.out.println("Height of tree is " + aTree.getHeight() + " (should be 4)");		System.out.println("Tree has " + aTree.getNumberOfNodes() + " nodes (should be 8)");	} // end testTreeOperations	public static void testTraversals(BinaryTree aTree)	{	  	// display nodes in preorder  		System.out.print("Preorder traversal is ");      aTree.preorder(aTree.getRootNode());		System.out.println("\n           (should be A B D E F G C H)"); 		// display nodes in postorder  		System.out.print("Postorder traversal is ");      aTree.postorder(aTree.getRootNode());		System.out.println("\n            (should be D F G E B H C A)");      		// display nodes in inorder  		System.out.print("Inorder traversal is ");      aTree.inorder(aTree.getRootNode());		System.out.println("\n          (should be D B F E G A C H)");		// display nodes in level order		System.out.print("Level order traversal is ");      aTree.levelorder(aTree.getRootNode());		System.out.println("\n              (should be A B C D E H F G)");	} // end testTraversals}  // end Driver/* OUTPUT   Creating a binary tree!   Test isEmpty(): false   Root of tree is A (should be A)   Height of tree is 4 (should be 4)   Tree has 8 nodes (should be 8)   Preorder traversal is A B D E F G C H               (should be A B D E F G C H)   Postorder traversal is D F G E B H C A                (should be D F G E B H C A)   Inorder traversal is D B F E G A C H              (should be D B F E G A C H)   Level order traversal is A B C D E H F G                  (should be A B C D E H F G)*/