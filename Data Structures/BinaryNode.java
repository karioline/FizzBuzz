class BinaryNode {	private Object data;	private BinaryNode left;	private BinaryNode right;		public BinaryNode()	{		this(null); 	} // end default constructor		public BinaryNode(Object dataPortion)	{		this(dataPortion, null,	null);	} // end constructor		public BinaryNode(Object dataPortion, BinaryNode leftChild,	BinaryNode rightChild)	{		data = dataPortion;		left = leftChild;		right = rightChild;	} // end constructor		public Object getData()	{		return data;	} // end getData		public void	setData(Object newData)	{		data = newData;	} // end setData		public BinaryNode getLeftChild()	{		return left;	} // end getLeftChild		public BinaryNode getRightChild()	{		return right;	} // end getRightChild		public void setLeftChild(BinaryNode leftChild)	{		left = (BinaryNode)leftChild;	} // end setLeftChild		public void setRightChild(BinaryNode rightChild)	{		right = (BinaryNode)rightChild;	} // end setRightChild	public boolean hasLeftChild()	{		return left != null;	} // end hasLeftChild	public boolean hasRightChild() {		return right != null;	} // end hasRightChild		public boolean isLeaf()	{		return (left == null) && (right == null);	} // end isLeaf	public BinaryNode copy() {		BinaryNode newRoot = new BinaryNode(data);		if (left != null)			newRoot.left = left.copy();		if (right != null)			newRoot.right = right.copy();		return newRoot;		} // end copy} // end BinaryNode